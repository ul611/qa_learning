syntax = "proto3";

package ozonmp.act_device_api.v1;

import "validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/ozonmp/act-device-api/pkg/act-device-api;act_device_api";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "Authorization";
      value: {
        description: "Авторизация (Basic)";
        type: TYPE_API_KEY;
        name: "Authorization";
        in: IN_HEADER;
      };
    };
  };
};


// ActDeviceApiService - Service for working with templates
service ActDeviceApiService {
  // CreateDeviceV1 - Create a device
  rpc CreateDeviceV1(CreateDeviceV1Request) returns (CreateDeviceV1Response) {
    option (google.api.http) = {
      post: "/api/v1/devices"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "Authorization";
          value: {};
        }
      }
    };
  }
  // DescribeDeviceV1 - Describe a device
  rpc DescribeDeviceV1(DescribeDeviceV1Request) returns (DescribeDeviceV1Response) {
    option (google.api.http) = {
      get: "/api/v1/devices/{device_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "Authorization";
          value: {};
        }
      }
    };
  }
  // ListDevicesV1 - List of devices
  rpc ListDevicesV1(ListDevicesV1Request) returns (ListDevicesV1Response) {
    option (google.api.http) = {
      get: "/api/v1/devices"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "Authorization";
          value: {};
        }
      }
    };
  }
  // UpdateDeviceV1 - Update a device
  rpc UpdateDeviceV1(UpdateDeviceV1Request) returns (UpdateDeviceV1Response) {
    option (google.api.http) = {
      put: "/api/v1/devices/{device_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "Authorization";
          value: {};
        }
      }
    };
  }
  // RemoveDeviceV1 - Remove a device
  rpc RemoveDeviceV1(RemoveDeviceV1Request) returns (RemoveDeviceV1Response) {
    option (google.api.http) = {
      delete: "/api/v1/devices/{device_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "Authorization";
          value: {};
        }
      }
    };
  }
}

message Device {
  uint64 id = 1;
  string platform = 2;
  uint64 user_id = 3;
  google.protobuf.Timestamp entered_at = 4;
}

message CreateDeviceV1Request {
  string platform = 1 [(validate.rules).string.min_len = 1];
  uint64 user_id = 2 [(validate.rules).uint64.gt = 0];
}

message CreateDeviceV1Response {
  uint64 device_id = 1;
}

message DescribeDeviceV1Request {
  uint64 device_id = 1 [(validate.rules).uint64.gt = 0];
}

message DescribeDeviceV1Response {
  Device value = 1;
}

message ListDevicesV1Request {
  uint64 page = 1;
  uint64 per_page = 2;
}

message ListDevicesV1Response {
  repeated Device items = 1;
}

message UpdateDeviceV1Request {
  uint64 device_id = 1 [(validate.rules).uint64.gt = 0];
  string platform = 2 [(validate.rules).string.min_len = 1];
  uint64 user_id = 3 [(validate.rules).uint64.gt = 0];
}

message UpdateDeviceV1Response {
  bool success = 1;
}

message RemoveDeviceV1Request {
  uint64 device_id = 1 [(validate.rules).uint64.gt = 0];
}

message RemoveDeviceV1Response {
  bool found = 1;
}

message DeviceEvent {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
  uint64 device_id = 2 [(validate.rules).uint64.gt = 0];
  uint64 type = 3 [(validate.rules).uint64.gt = 0];
  uint64 status = 4 [(validate.rules).uint64.gt = 0];
  Device payload = 5;
}